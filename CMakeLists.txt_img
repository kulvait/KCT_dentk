cmake_minimum_required(VERSION 3.1)
project(ImageRegistration)

set(CMAKE_INSTALL_PREFIX $ENV{HOME}/bin)
set(CMAKE_CXX_STANDARD 14)#Supported values are 98, 11 and 14.
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -pedantic -Wextra")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
set(CMAKE_BUILD_TYPE Debug)
set(BUILD_SHARED_LIBS False)

#ITK
find_package(ITK)
IF(ITK_FOUND)
	include( ${ITK_USE_FILE} )
ENDIF()

#OPENCV
find_package( OpenCV REQUIRED )
include_directories( ${OpenCV_INCLUDE_DIRS} )
message( ${OpenCV_INCLUDE_DIRS} )

#Header directories for the project
set(GLOBAL_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/include)
include_directories(${GLOBAL_INCLUDE_DIR})

#Includes relative to submodules directories
include_directories(${CMAKE_SOURCE_DIR}/submodules)

#Plog logger
include_directories(${CMAKE_SOURCE_DIR}/submodules/plog/include)

#CTIOL
include_directories(${CMAKE_SOURCE_DIR}/submodules/CTIOL/include)

#C++ String Toolkit Library
#(2) If the Boost libraries  (random, regex,  lexical_cast etc) are not
#available  or  it  not  wished   they  be  used  then  the   following
#preprocessor directive needs defining, either in code before strtk.hpp
#is included or as a compiler switch:
#   (*) strtk_no_tr1_or_boost
add_definitions("-Dstrtk_no_tr1_or_boost")
include_directories(${CMAKE_SOURCE_DIR}/include/strtk)

#CLI11 comand line parser library
include_directories(${CMAKE_SOURCE_DIR}/submodules/CLI11/include)

#Thread pool management lib ctpl from https://github.com/vit-vit/ctpl
include_directories(${CMAKE_SOURCE_DIR}/submodules/ctpl)
find_package (Threads)#include pthreads

#Matrix class ssh://git@gitlab.stimulate.ovgu.de:2200/robert-frysch/Matrix-Template.git
include_directories(${CMAKE_SOURCE_DIR}/submodules/Matrix-Template)

#Projection matrix comparator by Robert Frysch
#To enable Frobenius norm just define ENABLE_FROBENIUS_NORM
add_definitions("-DENABLE_FROBENIUS_NORM")
include_directories(${CMAKE_SOURCE_DIR}/submodules/projection-matrix-comparator)
SET( PMC_SRC ${CMAKE_SOURCE_DIR}/submodules/projection-matrix-comparator/pmatcachedfilereader.cpp  ${CMAKE_SOURCE_DIR}/submodules/projection-matrix-comparator/pmatcomparator.cpp)
add_library(pmc ${PMC_SRC})

FILE( GLOB UTILS_SRC ${CMAKE_SOURCE_DIR}/src/utils/*.cpp )
add_library(utils ${UTILS_SRC})

FILE( GLOB DENITK_SRC ${CMAKE_SOURCE_DIR}/submodules/CTIOL/src/DENITK/*.cpp )
add_library(denitk_lib ${DENITK_SRC})

FILE( GLOB CTIOL_SRC ${CMAKE_SOURCE_DIR}/submodules/CTIOL/src/*.cpp )
add_library(ctiol_lib ${CTIOL_SRC})

#file(GLOB GLOBAL_SOURCES "src/*.cpp")
message("Version opencv "${OpenCV_VERSION_MAJOR})
if(${OpenCV_VERSION_MAJOR} GREATER 2)

SET(GLOBAL_SOURCES src/main.cpp
	src/imageRegistrationExecutor.cpp)

add_executable(ImageRegistration ${GLOBAL_SOURCES})
set_target_properties(
    ImageRegistration 
    PROPERTIES 
        OUTPUT_NAME "imgreg"
        SUFFIX ""
)

target_link_libraries(ImageRegistration utils)
target_link_libraries(ImageRegistration ctiol_lib)
target_link_libraries(ImageRegistration pmc)
target_link_libraries(ImageRegistration ${CMAKE_THREAD_LIBS_INIT})
target_link_libraries(ImageRegistration ${OpenCV_LIBS} )
install (TARGETS ImageRegistration RUNTIME DESTINATION .)

else()
	message("Opencv is outdated on this system, can not compile ImageRegistration program.")
endif()

add_custom_target(formatWebkit
./formatWebkit
WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

SET(DENTK_GRAD_SOURCES src/dentk-grad.cpp)
add_executable(dentk_grad ${DENTK_GRAD_SOURCES})
set_target_properties(
    dentk_grad 
    PROPERTIES 
        OUTPUT_NAME "dentk-grad"
        SUFFIX ""
)
target_link_libraries(dentk_grad utils)
target_link_libraries(dentk_grad ctiol_lib)
install (TARGETS dentk_grad RUNTIME DESTINATION .)

SET(DENTK_CAT_SOURCES src/dentk-cat.cpp)
add_executable(dentk_cat ${DENTK_CAT_SOURCES})
set_target_properties(
    dentk_cat 
    PROPERTIES 
        OUTPUT_NAME "dentk-cat"
        SUFFIX ""
)
target_link_libraries(dentk_cat utils)
target_link_libraries(dentk_cat ctiol_lib)
target_link_libraries(dentk_cat pmc)
target_link_libraries(dentk_cat ${ITK_LIBRARIES} )
install (TARGETS dentk_cat RUNTIME DESTINATION .)

SET(DENTK_INFO_SOURCES src/dentk-info.cpp)
add_executable(dentk_info ${DENTK_INFO_SOURCES})
set_target_properties(
    dentk_info 
    PROPERTIES 
        OUTPUT_NAME "dentk-info"
        SUFFIX ""
)
target_link_libraries(dentk_info utils)
target_link_libraries(dentk_info ctiol_lib)
target_link_libraries(dentk_info pmc)
target_link_libraries(dentk_info ${ITK_LIBRARIES} )
install (TARGETS dentk_info RUNTIME DESTINATION .)

IF(ITK_FOUND)
	SET(DENTK_JPG_SOURCES src/dentk-jpg.cpp)
	add_executable(dentk_jpg ${DENTK_JPG_SOURCES})
	set_target_properties(
			dentk_jpg 
			PROPERTIES 
			OUTPUT_NAME "dentk-jpg"
			SUFFIX ""
			)
	target_link_libraries(dentk_jpg utils)
	target_link_libraries(dentk_jpg ctiol_lib)
	target_link_libraries(dentk_jpg denitk_lib)
	target_link_libraries(dentk_jpg pmc)
	target_link_libraries(dentk_jpg ${ITK_LIBRARIES} )
	install (TARGETS dentk_jpg RUNTIME DESTINATION .)
ENDIF()

SET(DENTK_FEN2DEN_SOURCES src/dentk-fen2den.cpp)
add_executable(dentk_fen2den ${DENTK_FEN2DEN_SOURCES})
set_target_properties(
    dentk_fen2den
    PROPERTIES 
        OUTPUT_NAME "dentk-fen2den"
        SUFFIX ""
)
target_link_libraries(dentk_fen2den ctiol_lib)
target_link_libraries(dentk_fen2den utils)
install (TARGETS dentk_fen2den RUNTIME DESTINATION .)

SET(DENTK_TRANSPOSE_SOURCES src/dentk-transpose.cpp)
add_executable(dentk_transpose ${DENTK_TRANSPOSE_SOURCES})
set_target_properties(
    dentk_transpose
    PROPERTIES 
        OUTPUT_NAME "dentk-transpose"
        SUFFIX ""
)
target_link_libraries(dentk_transpose ctiol_lib)
target_link_libraries(dentk_transpose utils)
install (TARGETS dentk_transpose RUNTIME DESTINATION .)

SET(DENTK_TODICOM_SOURCES src/dentk-todicom.cpp)
add_executable(dentk_todicom ${DENTK_TODICOM_SOURCES})
set_target_properties(
    dentk_todicom 
    PROPERTIES 
        OUTPUT_NAME "dentk-todicom"
        SUFFIX ""
)
target_link_libraries(dentk_todicom utils)
target_link_libraries(dentk_todicom ctiol_lib)
target_link_libraries(dentk_todicom pmc)
target_link_libraries(dentk_todicom ${ITK_LIBRARIES} )
target_link_libraries(dentk_todicom stdc++fs)#<experimental/filesystem>
install (TARGETS dentk_todicom RUNTIME DESTINATION .)


SET(DENTK_MERGE_SOURCES src/dentk-merge.cpp)
add_executable(dentk_merge ${DENTK_MERGE_SOURCES})
set_target_properties(
    dentk_merge 
    PROPERTIES 
        OUTPUT_NAME "dentk-merge"
        SUFFIX ""
)
target_link_libraries(dentk_merge utils)
target_link_libraries(dentk_merge ctiol_lib)
target_link_libraries(dentk_merge pmc)
target_link_libraries(dentk_merge ${ITK_LIBRARIES} )
install (TARGETS dentk_merge RUNTIME DESTINATION .)

SET(DENTK_EMPTY_SOURCES src/dentk-empty.cpp)
add_executable(dentk_empty ${DENTK_EMPTY_SOURCES})
set_target_properties(
    dentk_empty 
    PROPERTIES 
        OUTPUT_NAME "dentk-empty"
        SUFFIX ""
)
target_link_libraries(dentk_empty utils)
target_link_libraries(dentk_empty ctiol_lib)
target_link_libraries(dentk_empty pmc)
target_link_libraries(dentk_empty ${ITK_LIBRARIES} )
install (TARGETS dentk_empty RUNTIME DESTINATION .)

SET(DENTK_DIFF_SOURCES src/dentk-diff.cpp)
add_executable(dentk_diff ${DENTK_DIFF_SOURCES})
set_target_properties(
    dentk_diff
    PROPERTIES 
        OUTPUT_NAME "dentk-diff"
        SUFFIX ""
)
target_link_libraries(dentk_diff utils)
target_link_libraries(dentk_diff ctiol_lib)
target_link_libraries(dentk_diff pmc)
install (TARGETS dentk_diff RUNTIME DESTINATION .)

SET(DENTK_TOHU_SOURCES src/dentk-tohu.cpp)
add_executable(dentk_tohu ${DENTK_TOHU_SOURCES})
set_target_properties(
    dentk_tohu
    PROPERTIES 
        OUTPUT_NAME "dentk-tohu"
        SUFFIX ""
)
target_link_libraries(dentk_tohu utils)
target_link_libraries(dentk_tohu ctiol_lib)
target_link_libraries(dentk_tohu pmc)
install (TARGETS dentk_tohu RUNTIME DESTINATION .)

SET(DENTK_FROMHU_SOURCES src/dentk-fromhu.cpp)
add_executable(dentk_fromhu ${DENTK_FROMHU_SOURCES})
set_target_properties(
    dentk_fromhu
    PROPERTIES 
        OUTPUT_NAME "dentk-fromhu"
        SUFFIX ""
)
target_link_libraries(dentk_fromhu utils)
target_link_libraries(dentk_fromhu ctiol_lib)
target_link_libraries(dentk_fromhu pmc)
install (TARGETS dentk_fromhu RUNTIME DESTINATION .)



add_library(Catch INTERFACE)
target_include_directories(Catch INTERFACE ${CMAKE_SOURCE_DIR}/submodules/Catch2/single_include)
FILE( GLOB TST_SRC ${CMAKE_SOURCE_DIR}/tests/*.cpp )
add_executable(test_imgreg ${TST_SRC})
target_link_libraries(test_imgreg Catch)
target_link_libraries(test_imgreg utils)
target_link_libraries(test_imgreg ctiol_lib)
target_link_libraries(test_imgreg ${ITK_LIBRARIES})

enable_testing()
add_test(NAME ImageRegistrationTest COMMAND test_imgreg)
